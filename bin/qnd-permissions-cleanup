#!/usr/bin/sh
#
# Name: Quick and Dirty Permissions Cleanup Tool
# Version: 0.2.1.0
# Date: 2020-10-11
# Author: MMillar
# https://github.com/mmillar-bolis
# http://www.bolis.com
#
# Description:
# A simple script to clean up directory and file permissions.
#

# ---
# Variables Section
# ---

## Environment
PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin
export PATH

## User Configurable
directory='/mnt/zvolume00/share'
owner='michael'
group='michael'

## Private
help=0
verbose=0
vmsg='VERBOSE: '

# ---
# Functions Section
# ---

# Display help text
show_usage() {
    printf "Usage: ${0} [OPTIONS]... [PATH]...\n"
    printf "  -d    Directory path\n"
    printf "  -g    Group name\n"
    printf "  -o    Owner name\n"
    printf "  -h    Display help\n"
    printf "  -v    Display verbose\n\n"
}

# A true/false check to see if the script is running as root.
is_admin() {
    if [ $(id -u) -ne 0 ]; then
        return 0
    else
        return 1
    fi
}

# Set sane default permissions for respective files and folders.
set_permissions() {
    help=0
    find "${directory}" -type f -exec chmod 644 {} \;
    find "${directory}" -type d -exec chmod 775 {} \;
}

# Set both the owner and group ids by name for respective files and folders.
set_ownership() {
    help=0
    find "${directory}" -type f -exec chown "${owner}":"${group}" {} \;
    find "${directory}" -type d -exec chown "${owner}":"${group}" {} \;
}

# The main function which calls the others
main() {
    if [ $verbose -eq 1 ]; then
        printf "${vmsg}Owner: ${owner}\n"
        printf "${vmsg}Group: ${group}\n"
        printf "${vmsg}Directory: ${directory}\n"
    fi

    if [ $is_admin -eq 1 ]; then
        set_permissions
        set_ownership
    elif [ $help -eq 1 ]; then
        show_usage
    else
        printf "Please run as root.\n"
    fi
}

# ---
# Script Section
# ---

# True/false check for admin
if [ $(id -u) -ne 0 ]; then
    is_admin=0
else
    is_admin=1
fi

# Case will treat the specified commandline values as optional arguments.
# Shift jumps to the next word to be included as part of an arg. The while loop
# repeats scanning for matching arguments until there are no more on the
# command line and it finally breaks.
while :; do
    case "${1}" in
        -d) shift; directory="${1}";;
        -g) shift; group="${1}";;
        -h) help=1;;
        -o) shift; owner="${1}";;
        -v) verbose=1;;
        --) shift; break;;
        -*) help=1;;
        *) break;;
    esac
    shift
done

# Run main function after processing arguments. Pass all arguments into the
# function.
main "$@"

# Exit with last status
exit $?
